@use 'sass:list';
@use 'sass:string';
@import 'config';
@import 'themes/dark';
@import 'themes/light';
@import '../../functions/strReplace';

$themes: (
    light: $light-theme,
    dark: $dark-theme
  );

@function get-color($color-name, $theme, $theme-colors, $group-name) {
  @if string.index($color-name, '%') == 1 {
    $group: map-get($theme, $group-name);

    @return map-get($group, str-replace($color-name, '%'));
  }

  @return map-get($theme-colors, str-replace($color-name, '@', $group-name));
}

@function generate-theme-colors($theme) {
  $theme-colors: ();

  // Main
  @each $group-name, $group in $theme-config {
    $group-type: map-get($group, 'type');
    $group-colors: map-get($group, 'colors');

    @if $group-type == 'single' {
      @each $shade-name, $shade-layers in $group-colors {
        $color-rest: black;
        $color-hover: black;
        $color-active: black;

        @for $i from 1 through list.length($shade-layers) {
          $layer-config: list.nth($shade-layers, -$i);
          $layer-color-name: list.nth($layer-config, 1);
          $layer-color: get-color($layer-color-name, $theme, $theme-colors, $group-name);
          $layer-color-state-modifiers: list.nth($layer-config, 2);
          $rest-modifier: list.nth($layer-color-state-modifiers, 1);
          $hover-modifier: $rest-modifier;

          @if list.length($layer-color-state-modifiers) >= 2 {
            $hover-modifier: list.nth($layer-color-state-modifiers, 2);
          }

          $active-modifier: $hover-modifier;

          @if list.length($layer-color-state-modifiers) >= 3 {
            $active-modifier: list.nth($layer-color-state-modifiers, 3);
          }

          $color-rest: mix($layer-color, $color-rest, $rest-modifier);
          $color-hover: mix($layer-color, $color-hover, $hover-modifier);
          $color-active: mix($layer-color, $color-active, $active-modifier);
        }

        $theme-colors: map-merge(
            $theme-colors,
            (
              '#{$group-name}-#{$shade-name}': $color-rest,
              '#{$group-name}-#{$shade-name}-hover': $color-hover,
              '#{$group-name}-#{$shade-name}-active': $color-active
            )
          );
      }
    }

    @if $group-type == 'foreach' {
      @each $color-name, $_ in map-get($theme, $group-name) {
        @each $shade-name, $shade-layers in $group-colors {
          $color-rest: black;
          $color-hover: black;
          $color-active: black;

          @for $i from 1 through list.length($shade-layers) {
            $layer-config: list.nth($shade-layers, -$i);
            $layer-color-name: list.nth($layer-config, 1);
            $layer-color: get-color(
                str-replace(
                  str-replace($layer-color-name, '%', '%#{$color-name}'),
                  '@',
                  '@#{$color-name}'
                ),
                $theme,
                $theme-colors,
                $group-name
              );
            $layer-color-state-modifiers: list.nth($layer-config, 2);
            $rest-modifier: list.nth($layer-color-state-modifiers, 1);
            $hover-modifier: $rest-modifier;

            @if list.length($layer-color-state-modifiers) >= 2 {
              $hover-modifier: list.nth($layer-color-state-modifiers, 2);
            }

            $active-modifier: $hover-modifier;

            @if list.length($layer-color-state-modifiers) >= 3 {
              $active-modifier: list.nth($layer-color-state-modifiers, 3);
            }

            $color-rest: mix($layer-color, $color-rest, $rest-modifier);
            $color-hover: mix($layer-color, $color-hover, $hover-modifier);
            $color-active: mix($layer-color, $color-active, $active-modifier);
          }

          $theme-colors: map-merge(
              $theme-colors,
              (
                '#{$group-name}#{$color-name}-#{$shade-name}': $color-rest,
                '#{$group-name}#{$color-name}-#{$shade-name}-hover': $color-hover,
                '#{$group-name}#{$color-name}-#{$shade-name}-active': $color-active
              )
            );
        }
      }
    }
  }

  // Overrides
  $overrides: map-get($theme, 'overrides');

  @each $color-name, $color-value in $overrides {
    $theme-colors: map-merge($theme-colors, ($color-name: $color-value));
  }

  @return $theme-colors;
}

@mixin create-css-themes-root() {
  @each $theme-name, $theme in $themes {
    $theme-colors: generate-theme-colors($theme);

    &.#{$theme-name}-theme {
      @each $color-name, $color-value in $theme-colors {
        --#{$color-name}:
          #{$color-value}
      ;
      }
    }
  }
}
